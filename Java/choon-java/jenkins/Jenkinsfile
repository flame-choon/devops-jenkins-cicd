pipeline {
    agent any

    environment {
        PROJECT_PATH = 'Java/choon-java'
        AWS_REGION = 'ap-northeast-2'
        DEPLOY_HOST = '172.31.40.150'
        ECR_LOGIN_HELPER = 'docker-credential-ecr-login'
        ECR_URL = '767404772322.dkr.ecr.ap-northeast-2.amazonaws.com'
        ECR_REPOSITORY_NAME = 'kwangjin-repository'
        ECR_IMAGE_TAG = '2.9.40'

    }

    stages {
        stage('Pull Codes from GitHub') {
            steps{
                sh "echo --- Pull Codes from GitHub ---"
                checkout scm
            }
        }
        stage('Build Codes by Gradle') {
            steps {
                sh """
                echo --- Build Codes by Gradle ---
                cd ${env.PROJECT_PATH}
                ./gradlew clean build
                """
            }
        }
//         stage('SonarQube Analysis') {
//             steps {
//                 withSonarQubeEnv('sonarqube') {
//                     sh """
//                     cd ${env.PROJECT_PATH}
//                     ./gradlew sonarqube
//                     """
//                 }
//             }
//         }
//         stage('SonarQube Quality Gate') {
//             steps {
//                 timeout(time: 1, unit: 'HOURS') {
//                     waitForQualityGate abortPipeline: true
//                 }
//             }
//         }
        stage('Build Docker Image by Jib & Push to AWS ECR Repository') {
            steps {
                withAWS(region:"${env.AWS_REGION}", credentials:"aws-credentials") {
                    ecrLogin()
                    sh """
                        curl -O https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/0.4.0/linux-amd64/${env.ECR_LOGIN_HELPER}
                        chmod +x ${env.ECR_LOGIN_HELPER}
                        mv ${env.ECR_LOGIN_HELPER} /usr/local/bin/
                        cd ${env.PROJECT_PATH}
                        ./gradlew jib -Djib.to.image=${env.ECR_URL}/${env.ECR_REPOSITORY_NAME} -Djib.to.tags=${env.ECR_IMAGE_TAG} -Djib.console='plain'
                    """
                }
            }
        }
//         stage('Scan ECR Image'){
//             steps {
//                 sh """
//                 cd ${env.PROJECT_PATH}/jenkins
//                 ./scan_ecr_image.sh
//                 """
//             }
//         }

        stage('Deploy to AWS EC2 VM'){
           steps{
                sshagent(credentials : ["deploy-key"]) {
                    sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.DEPLOY_HOST} \
                    'aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}/${ECR_REPOSITORY_NAME}; \
                    docker run -d -it -p 8080:8080 --name choon-java --restart unless-stopped -t ${env.ECR_URL}/${env.ECR_REPOSITORY_NAME}:${env.ECR_IMAGE_TAG};'"
                }
            }
        }
    }
}